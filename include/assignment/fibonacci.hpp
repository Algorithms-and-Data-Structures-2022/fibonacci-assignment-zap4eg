#pragma once

#include <cstdint>  // int64_t
#include <vector>

#include "assignment/matrix2d.hpp"  // Matrix2d, matrix_power

namespace assignment {

  /**
   * Вычисление числа Фибоначчи по формуле Бине.
   *
   * Ссылка: https://ru.wikipedia.org/wiki/Числа_Фибоначчи#Формула_Бине
   * Сложность: O(1) - по памяти, O(1) - по времени.
   * Эта формула является лишь приближением!
   *
   * @param n - порядковый номер числа Фибоначчи (неотрицательный)
   * @return вычисленное число Фибоначчи
   */
  int64_t fib_binet(int n);

  /**
   * Вычисление числа Фибоначчи итеративным способом.
   *
   * Используется буфер из двух переменных.
   * Сложность: O(1) - по памяти, O(N) - по времени.
   *
   * @param n - порядковый номер числа Фибоначчи (неотрицательный)
   * @return вычисленное число Фибоначчи
   */
  int64_t fib_iterative(int n);

  /**
   * Вычисление числа Фибоначчи рекурсивным способом.
   *
   * @param n - порядковый номер числа Фибоначчи (неотрицательный)
   * @return вычисленное число Фибоначчи
   */
  int64_t fib_recursive(int n);

  /**
   * Вычисление числа Фибоначчи рекурсивным способом при помощи мемоизации.
   *
   * Уже вычисленные значения чисел Фибоначчи сохраняются в кеш.
   * Все элементы кеша кроме 0 и 1 инициализируются значением -1.
   * cache = [0, 1, -1, -1, ..., -1]
   *
   * @param n - порядковый номер числа Фибоначчи (неотрицательный)
   * @param cache - ассоциативный массив из вычисленных чисел Фибоначчи
   * @return вычисленное число Фибоначчи
   */
  int64_t fib_recursive_memoization(int n, std::vector<int64_t>& cache);

  // базовая матрица для вычисления чисел Фибоначчи
  inline constexpr Matrix2x2 FibMatrix = {{{0, 1}, {1, 1}}};

  /**
   * Вычисление числа Фибоначчи методом возведения в степень базовой матрицы.
   *
   * Сложность ~ O(log n).
   *
   * @param n - порядковый номер числа Фибоначчи (неотрицательный)
   * @return вычисленное число Фибоначчи
   */
  int64_t fib_matrix(int n);

}  // namespace assignment
